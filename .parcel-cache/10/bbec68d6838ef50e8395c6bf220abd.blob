var _modelJs = require('./model.js');
var _viewsRecipeViewJs = require('./views/recipeView.js');
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
var _viewsRecipeViewJsDefault = _parcelHelpers.interopDefault(_viewsRecipeViewJs);
var _viewsSearchViewJs = require('./views/searchView.js');
var _viewsSearchViewJsDefault = _parcelHelpers.interopDefault(_viewsSearchViewJs);
var _viewsResultsViewJs = require('./views/resultsView.js');
var _viewsResultsViewJsDefault = _parcelHelpers.interopDefault(_viewsResultsViewJs);
var _viewsPaginationViewJs = require('./views/paginationView.js');
var _viewsPaginationViewJsDefault = _parcelHelpers.interopDefault(_viewsPaginationViewJs);
var _viewsBookMarksViewJs = require('./views/bookMarksView.js');
var _viewsBookMarksViewJsDefault = _parcelHelpers.interopDefault(_viewsBookMarksViewJs);
var _viewsAddRecipeViewJs = require('./views/addRecipeView.js');
var _viewsAddRecipeViewJsDefault = _parcelHelpers.interopDefault(_viewsAddRecipeViewJs);
require('core-js/stable');
require('regenerator-runtime/runtime');
require('regenerator-runtime');
// https://forkify-api.herokuapp.com/v2
// /////////////////////////////////////
const controlRecipes = async function () {
  try {
    // GUardamos en ID los digitos que se generan luego del # en la barra del navegador.
    const id = window.location.hash.slice(1);
    // Cortamos el # ya que no nos sirve.
    if (!id) return;
    _viewsRecipeViewJsDefault.default.renderSpinner();
    // Spinner de Carga.
    // Utilizamos el Algoritmo de Actualización del Dom para renderizar
    _viewsResultsViewJsDefault.default.update(_modelJs.getSearchResultsPage());
    _viewsBookMarksViewJsDefault.default.update(_modelJs.state.bookMarks);
    // 1. Modificación del estado de Receta
    await _modelJs.loadRecipe(id);
    // Llamada a la API , búsqueda de receta con id sacado de barra de navegación.
    // 2. Renderizado de Receta con Nuevo Estado
    _viewsRecipeViewJsDefault.default.render(_modelJs.state.recipe);
  } catch (err) {
    _viewsRecipeViewJsDefault.default.renderError();
    console.log(err);
  }
};
const controlSearchResults = async function () {
  try {
    _viewsResultsViewJsDefault.default.renderSpinner();
    // 1. Get Search Query
    const query = _viewsSearchViewJsDefault.default.getQuery();
    if (!query) return;
    // 2. Load Search results
    await _modelJs.loadSearchResults(query);
    // Renderizamos sólo 10 resultados
    _viewsResultsViewJsDefault.default.render(_modelJs.getSearchResultsPage());
    // Renderizamos botones de paginación inciales.
    _viewsPaginationViewJsDefault.default.render(_modelJs.state.search);
  } catch (err) {
    console.log(err);
  }
};
const controlPagination = function (goToPage) {
  // Renderizamos resultados NUEVOS
  _viewsResultsViewJsDefault.default.render(_modelJs.getSearchResultsPage(goToPage));
  // Renderizamos Nuevos botones
  _viewsPaginationViewJsDefault.default.render(_modelJs.state.search);
};
const controlServings = function (newServings) {
  // Actualizar Porciones de comida.
  _modelJs.updateServings(newServings);
  // Actualizar la vista.
  // recipeView.render(model.state.recipe);
  _viewsRecipeViewJsDefault.default.update(_modelJs.state.recipe);
};
const controlAddBookmark = function () {
  if (!_modelJs.state.recipe.bookmarked) _modelJs.addBookMark(_modelJs.state.recipe); else _modelJs.deleteBookMark(_modelJs.state.recipe.id);
  // Actualizar Vistas de recetas
  _viewsRecipeViewJsDefault.default.update(_modelJs.state.recipe);
  _viewsBookMarksViewJsDefault.default.render(_modelJs.state.bookMarks);
  // Cambiar ID en la URL
  window.history.pushState(null, '', `#${_modelJs.state.recipe.id}`);
};
const renderBookMarks = function () {
  _viewsBookMarksViewJsDefault.default.render(_modelJs.state.bookMarks);
};
const controlAddRecipe = async function (newRecipe) {
  try {
    // Cargar Spinner
    _viewsAddRecipeViewJsDefault.default.renderSpinner();
    await _modelJs.uploadRecipe(newRecipe);
    console.log(_modelJs.state.recipe);
    // Renderizar Receta Añadida
    _viewsRecipeViewJsDefault.default.render(_modelJs.state.recipe);
    // Success Message
    _viewsAddRecipeViewJsDefault.default.renderMessage();
    // Renderizar  la vista de Favoritos
    _viewsBookMarksViewJsDefault.default.render(_modelJs.state.bookMarks);
    window.history.pushState(null, '', `#${_modelJs.state.recipe.id}`);
    // Cerrar Formulario Adhesión de recetas
    setTimeout(function () {
      _viewsAddRecipeViewJsDefault.default.toggleWindow();
      location.reload();
    }, 1000);
  } catch (err) {
    _viewsAddRecipeViewJsDefault.default.renderError(err.message);
  }
};
// SUSCRIPTOR: Event Handler en el COntrolador.
const init = function () {
  _viewsBookMarksViewJsDefault.default.addHandlerRender(renderBookMarks);
  _viewsRecipeViewJsDefault.default.addHandlerRender(controlRecipes);
  _viewsRecipeViewJsDefault.default.addHandlerUpdateServings(controlServings);
  _viewsRecipeViewJsDefault.default.addHandlerAddBookmark(controlAddBookmark);
  _viewsSearchViewJsDefault.default.addHandlerSearch(controlSearchResults);
  _viewsPaginationViewJsDefault.default.addHandlerClick(controlPagination);
  _viewsAddRecipeViewJsDefault.default.addHandlerUpload(controlAddRecipe);
  console.log('hola');
  console.log('hola');
};
init();
